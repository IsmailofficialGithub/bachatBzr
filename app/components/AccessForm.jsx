"use client";

import { useState, useEffect } from 'react';
import { toast } from 'react-toastify';

// Mock API function that simulates checking if a username is unique
const checkUsernameAvailability = async (username) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 800));
  
  // Simulate that usernames containing "admin" or "test" are already taken
  return !(username.toLowerCase().includes('admin') || 
           username.toLowerCase().includes('test'));
};

// Function to generate random username with domain
const generateUsername = () => {
  const prefixes = ['user', 'account', 'profile', 'member', 'client', 'staff'];
  const domains = ['company', 'corp', 'team', 'org', 'enterprise', 'dev'];
  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const randomDomain = domains[Math.floor(Math.random() * domains.length)];
  const randomNum = Math.floor(Math.random() * 10000);
  const randomChars = Math.random().toString(36).substring(2, 5);
  return `${randomPrefix}${randomNum}_${randomChars}@${randomDomain}.com`;
};

// Function to generate random password with higher complexity
const generatePassword = () => {
  const upperCase = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
  const lowerCase = 'abcdefghijkmnopqrstuvwxyz';
  const numbers = '23456789';
  const special = '!@#$%^&*_-+=';
  let result = '';
  
  // Ensure at least two of each character type
  result += upperCase[Math.floor(Math.random() * upperCase.length)];
  result += upperCase[Math.floor(Math.random() * upperCase.length)];
  result += lowerCase[Math.floor(Math.random() * lowerCase.length)];
  result += lowerCase[Math.floor(Math.random() * lowerCase.length)];
  result += numbers[Math.floor(Math.random() * numbers.length)];
  result += numbers[Math.floor(Math.random() * numbers.length)];
  result += special[Math.floor(Math.random() * special.length)];
  result += special[Math.floor(Math.random() * special.length)];
  
  // Add more random characters to reach 16 characters total
  const allChars = upperCase + lowerCase + numbers + special;
  for (let i = 8; i < 16; i++) {
    result += allChars[Math.floor(Math.random() * allChars.length)];
  }
  
  // Shuffle the password
  return result.split('').sort(() => 0.5 - Math.random()).join('');
};

export default function AccessForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [role, setRole] = useState('user');
  const [autoGenerate, setAutoGenerate] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [isVerifying, setIsVerifying] = useState(false);
  const [isUsernameValid, setIsUsernameValid] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [autoGeneratedCredentials, setAutoGeneratedCredentials] = useState(null);
  const [verificationSuccess, setVerificationSuccess] = useState(false);
  const [verificationAttempted, setVerificationAttempted] = useState(false);
  const [formSubmitted, setFormSubmitted] = useState(false);

  // Function to verify username availability
  const verifyUsername = async () => {
    if (!username) return;
    
    setIsVerifying(true);
    setVerificationAttempted(true);
    try {
      const isValid = await checkUsernameAvailability(username);
      setIsUsernameValid(isValid);
      setVerificationSuccess(isValid);
      if (isValid && autoGenerate) {
        setPassword(generatePassword());
      }
      
      // Show toast notification based on verification result
      if (isValid) {
        toast.success("Username is available!");
      } else {
        toast.error("Username is already taken!");
      }
    } catch (error) {
      console.error("Error verifying username:", error);
      toast.error("Error verifying username. Please try again.");
    } finally {
      setIsVerifying(false);
    }
  };

  // Function to generate and verify credentials
  const generateAndVerifyCredentials = async () => {
    setIsGenerating(true);
    setVerificationAttempted(false);
    let isValid = false;
    let newUsername = '';
    
    // Try to generate a valid username
    while (!isValid) {
      setIsVerifying(true);
      newUsername = generateUsername();
      
      try {
        isValid = await checkUsernameAvailability(newUsername);
        if (isValid) {
          setUsername(newUsername);
          const newPassword = generatePassword();
          setPassword(newPassword);
          setAutoGeneratedCredentials({ username: newUsername, password: newPassword });
          setIsUsernameValid(true);
          setVerificationSuccess(true);
          toast.success("Credentials generated successfully!");
        }
      } catch (error) {
        console.error("Error verifying username:", error);
      } finally {
        setIsVerifying(false);
      }
    }
    
    setIsGenerating(false);
  };

  // Handle manual username change
  const handleUsernameChange = (e) => {
    setUsername(e.target.value);
    setIsUsernameValid(true);
    setVerificationSuccess(false);
    setVerificationAttempted(false);
    setAutoGeneratedCredentials(null);
  };

  // Toggle auto-generate
  const toggleAutoGenerate = () => {
    setAutoGenerate(!autoGenerate);
    if (!autoGenerate) {
      setShowPassword(true);
      setUsername('');
      setPassword('');
      setAutoGeneratedCredentials(null);
      setVerificationSuccess(false);
      setVerificationAttempted(false);
    } else {
      setAutoGeneratedCredentials(null);
    }
  };

  // Copy credentials to clipboard
  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    toast.info("Copied to clipboard!");
  };

  // Handle form submission
  const handleSubmit = () => {
    if (autoGenerate || (verificationSuccess && password)) {
      toast.success(`Access granted to ${username} with ${role} role!`);
      setFormSubmitted(true);
      
      // Reset form after successful submission
      setTimeout(() => {
        setUsername('');
        setPassword('');
        setAutoGeneratedCredentials(null);
        setVerificationSuccess(false);
        setVerificationAttempted(false);
        setFormSubmitted(false);
        setAutoGenerate(false);
      }, 3000);
    } else if (!verificationAttempted || !verificationSuccess) {
      toast.error("Please verify the username first!");
    } else if (!password) {
      toast.error("Please enter a password!");
    }
  };

  return (
    <div className="min-h-screen bg-[#16404D] flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-xl shadow-lg overflow-hidden text-black mx-4">
        <div className="bg-indigo-600 p-4 sm:p-6 text-white">
          <h1 className="text-xl sm:text-2xl font-bold">Grant Access</h1>
          <p className="opacity-90 text-sm sm:text-base">Add new user to the system</p>
        </div>
        
        <div className="p-4 sm:p-6 space-y-4 sm:space-y-6">
          {/* Auto-generated credentials display */}
          {autoGeneratedCredentials && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3 sm:p-4">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-2 gap-2">
                <h3 className="text-sm font-medium text-green-800">Auto-generated credentials</h3>
                <button 
                  onClick={() => copyToClipboard(`Username: ${autoGeneratedCredentials.username}\nPassword: ${autoGeneratedCredentials.password}`)}
                  className="text-xs bg-green-100 hover:bg-green-200 text-green-700 px-2 py-1 rounded flex items-center justify-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                    <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
                  </svg>
                  Copy All
                </button>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-xs">
                <div className="flex justify-between items-center bg-white p-2 rounded border border-green-100">
                  <span className="text-green-600 mr-2">Username:</span>
                  <div className="flex items-center">
                    <span className="font-mono truncate max-w-[120px] sm:max-w-[150px]">
                      {autoGeneratedCredentials.username}
                    </span>
                    <button 
                      onClick={() => copyToClipboard(autoGeneratedCredentials.username)}
                      className="ml-2 text-green-600 hover:text-green-800"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                        <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
                      </svg>
                    </button>
                  </div>
                </div>
                <div className="flex justify-between items-center bg-white p-2 rounded border border-green-100">
                  <span className="text-green-600 mr-2">Password:</span>
                  <div className="flex items-center">
                    <span className="font-mono truncate max-w-[120px] sm:max-w-[150px]">
                      {autoGeneratedCredentials.password}
                    </span>
                    <button 
                      onClick={() => copyToClipboard(autoGeneratedCredentials.password)}
                      className="ml-2 text-green-600 hover:text-green-800"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                        <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div>
            <div className="flex justify-between items-center mb-1">
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                Username
              </label>
              {verificationAttempted && (
                <span className={`text-xs ${isUsernameValid ? 'text-green-500' : 'text-red-500'}`}>
                  {isUsernameValid ? 'Available' : 'Taken'}
                </span>
              )}
            </div>
            <div className="flex flex-col sm:flex-row gap-2">
              <div className="relative flex-1">
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={handleUsernameChange}
                  disabled={autoGenerate}
                  className={`w-full px-3 py-2 text-sm sm:text-base border rounded-lg transition 
                    ${!verificationAttempted ? 'border-gray-300' : 
                      isUsernameValid ? 'border-green-500 focus:ring-2 focus:ring-green-500 focus:border-green-500' : 
                      'border-red-500 focus:ring-2 focus:ring-red-500 focus:border-red-500'}
                    ${autoGenerate ? 'bg-gray-100' : ''}
                  `}
                  placeholder="Enter username"
                />
                {isVerifying && (
                  <div className="absolute right-3 top-2.5">
                    <svg className="animate-spin h-4 w-4 sm:h-5 sm:w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </div>
                )}
              </div>
              {!autoGenerate && (
                <button
                  onClick={verifyUsername}
                  disabled={!username || isVerifying}
                  className="px-3 py-2 sm:px-4 sm:py-2 bg-indigo-100 text-indigo-700 rounded-lg hover:bg-indigo-200 transition disabled:opacity-50 disabled:cursor-not-allowed text-sm sm:text-base"
                >
                  Verify
                </button>
              )}
            </div>
          </div>

          <div>
            <div className="flex justify-between items-center mb-1">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <div className="flex space-x-2">
                {!autoGenerate && password && (
                  <button
                    type="button"
                    onClick={() => copyToClipboard(password)}
                    className="text-xs text-indigo-600 hover:text-indigo-800"
                  >
                    Copy
                  </button>
                )}
                {!autoGenerate && (
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="text-xs text-indigo-600 hover:text-indigo-800"
                  >
                    {showPassword ? 'Hide' : 'Show'}
                  </button>
                )}
              </div>
            </div>
            <div className="relative">
              <input
                id="password"
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                disabled={autoGenerate}
                className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition disabled:bg-gray-100"
                placeholder={autoGenerate ? '' : 'Enter password'}
              />
              {!autoGenerate && !password && (
                <div className="absolute right-2 top-2">
                  <button
                    onClick={() => setPassword(generatePassword())}
                    className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-2 py-1 rounded"
                  >
                    Generate
                  </button>
                </div>
              )}
            </div>
          </div>

          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 mt-2">
            <div className="flex items-center space-x-2">
              <input
                id="auto-generate"
                type="checkbox"
                checked={autoGenerate}
                onChange={toggleAutoGenerate}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="auto-generate" className="text-sm text-gray-700">
                Auto-generate credentials
              </label>
            </div>
            {autoGenerate && (
              <button
                onClick={generateAndVerifyCredentials}
                disabled={isGenerating}
                className="text-sm text-indigo-600 hover:text-indigo-800 disabled:opacity-50 text-left sm:text-right"
              >
                {isGenerating ? 'Generating...' : 'Regenerate'}
              </button>
            )}
          </div>
          {autoGenerate && !isGenerating && (
            <p className="mt-1 text-xs text-gray-500">Secure credentials will be auto-generated and verified</p>
          )}

          <div>
            <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-1">
              Role
            </label>
            <select
              id="role"
              value={role}
              onChange={(e) => setRole(e.target.value)}
              className="w-full px-3 py-2 text-sm sm:text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition appearance-none bg-white"
            >
              <option value="user">Standard User</option>
              <option value="editor">Content Editor</option>
              <option value="admin">Administrator</option>
              <option value="superadmin">Super Admin</option>
            </select>
          </div>

          <div className="pt-2">
            <button
              type="button"
              onClick={handleSubmit}
              disabled={formSubmitted}
              className={`w-full ${formSubmitted ? 'bg-green-600' : 'bg-indigo-600 hover:bg-indigo-700'} text-white font-medium py-2 sm:py-3 px-4 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-[1.01] active:scale-95 text-sm sm:text-base`}
            >
              <div className="flex items-center justify-center space-x-2">
                {formSubmitted ? (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 sm:h-5 sm:w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    <span>Access Granted!</span>
                  </>
                ) : (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 sm:h-5 sm:w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                    </svg>
                    <span>Give Access</span>
                  </>
                )}
              </div>
            </button>
          </div>
        </div>

        <div className="bg-gray-50 px-4 sm:px-6 py-3 sm:py-4 border-t border-gray-200">
          <p className="text-xs text-gray-500">
            By granting access, you confirm this user should have {role === 'superadmin' ? 'full' : role === 'admin' ? 'administrative' : 'appropriate'} permissions.
          </p>
        </div>
      </div>
    </div>
  );
}